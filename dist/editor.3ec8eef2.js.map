{"version":3,"sources":["types.ts","editor.ts"],"names":[],"mappings":"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","file":"editor.3ec8eef2.js","sourceRoot":"..","sourcesContent":["export enum GemType {\n    BALL_SPEED_INCREASE = 0,\n    BALL_SPEED_DECREASE = 1,\n    PADDLE_GROW = 2,\n    PADDLE_SHRINK = 3,\n    NONE = 4,\n    MUNITION = 5\n}\n\nexport interface Rect {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport interface Brick extends Rect {\n    color: string;\n    hit: boolean;\n    gemType: GemType;\n    strengths: number; // how many hit to destroy\n}\n\nexport const brickColors = [];\nbrickColors[GemType.BALL_SPEED_DECREASE] = 'red';\nbrickColors[GemType.NONE] = 'grey';\nbrickColors[GemType.BALL_SPEED_INCREASE] = 'green';\nbrickColors[GemType.PADDLE_GROW] = 'black';\nbrickColors[GemType.PADDLE_SHRINK] = 'yellow';\nbrickColors[GemType.MUNITION] = 'pink';\n","import { GemType, brickColors } from './types'\n\nconsole.log('editor')\n\nlet grids = []\nlet selectedGrid\n\nconst height = 600\nconst width = 800\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\nconst context = canvas.getContext('2d')\n\nconst apply = document.querySelector('#apply')\nconst selectMode = document.querySelector('#selectMode') as HTMLInputElement\n\nconst gemSelect = document.querySelector('#gemSelect') as HTMLSelectElement\n\nconst exportButton = document.querySelector('#expot_btn') as HTMLButtonElement\n\nconst gridList = document.querySelector('#gridList')\n\nexportButton.addEventListener('click', () => {\n    const d = []\n    for (let grid of grids) {\n        const bs = grid.bricks\n            .filter((b) => b.selected)\n            .map((b) => {\n                const c = { ...b }\n                delete c.width\n                delete c.height\n                delete c.x\n                delete c.y\n                delete c.selected\n                return c\n            })\n\n        const data = {\n            rows: grid.rows,\n            cols: grid.cols,\n            bricks: bs,\n        }\n        d.push(data)\n    }\n\n    console.log(JSON.stringify({ grids: d }, null, 2))\n})\n\ngemSelect.addEventListener('change', () => {\n    if (selectedBrick) {\n        selectedBrick.gemType = gemSelect.selectedIndex\n        render()\n    }\n})\n\nlet selectedBrick\n\ncanvas.addEventListener('click', (e) => {\n    const bricks = selectedGrid.bricks\n    const rect = canvas.getBoundingClientRect()\n    const x = e.pageX - rect.left\n    const y = e.pageY - rect.top\n\n    const xPos = Math.floor(x / (width / selectedGrid.cols))\n    const yPos = Math.floor(y / (height / selectedGrid.rows))\n\n    const index = yPos * selectedGrid.cols + xPos\n    bricks[index].selected = selectMode.checked\n    selectedBrick = bricks[index]\n\n    gemSelect.selectedIndex = selectedBrick.gemType\n\n    render()\n})\n\napply.addEventListener('click', () => {\n    const newGrid: any = {}\n    newGrid.rows = parseInt(\n        (document.querySelector('#rows-tx') as HTMLInputElement).value\n    )\n    newGrid.cols = parseInt(\n        (document.querySelector('#cols-tx') as HTMLInputElement).value\n    )\n    const bricks = []\n    for (var r = 0; r < newGrid.rows; r++) {\n        for (var c = 0; c < newGrid.cols; c++) {\n            bricks.push({\n                r: r,\n                c: c,\n                y: r * (height / newGrid.rows),\n                x: c * (width / newGrid.cols),\n                width: width / newGrid.cols,\n                height: height / newGrid.rows,\n                selected: false,\n                gemType: GemType.NONE,\n                strength: 1,\n            })\n        }\n    }\n    newGrid.bricks = bricks\n    grids.push(newGrid)\n    selectedGrid = newGrid\n\n    console.log('grids ', grids)\n    buildGridList()\n    render()\n})\n\nfunction buildGridList() {\n    while (gridList.lastElementChild) {\n        gridList.removeChild(gridList.lastElementChild)\n    }\n    for (const grid of grids) {\n        const li = document.createElement('li')\n        const btn = document.createElement('button') as HTMLButtonElement\n        const span = document.createElement('span')\n        span.textContent = `Grid ${grid.rows} x ${grid.cols}`\n        btn.textContent = 'Delete'\n        btn.onclick = () => {\n            console.log('Delete')\n            grids = grids.filter((x) => x !== grid)\n            buildGridList()\n            render()\n        }\n        li.appendChild(btn)\n        li.appendChild(span)\n        //li.textContent = `Grid ${grid.rows} x ${grid.cols}`;\n        span.onclick = () => {\n            console.log('clic ', grid)\n            li.classList.add('selected')\n            if (selectedLi) {\n                selectedLi.classList.remove('selected')\n            }\n            selectedGrid = grid\n            selectedLi = li\n            render()\n        }\n        if (selectedGrid === grid) {\n            li.classList.add('selected')\n            selectedLi = li\n        }\n        gridList.appendChild(li)\n        console.log('append child ')\n    }\n}\n\nlet selectedLi\n\nfunction render() {\n    context.clearRect(0, 0, canvas.width, canvas.height)\n\n    context.beginPath()\n\n    context.lineWidth = 1\n    context.strokeStyle = '#000000'\n\n    context.fillStyle = '#000000'\n    context.fillStyle = '#999999'\n\n    for (let grid of grids) {\n        const bricks = grid.bricks\n        for (let brick of bricks) {\n            if (brick.selected) {\n                context.fillStyle = brickColors[brick.gemType]\n            } else {\n                context.fillStyle = ''\n            }\n\n            context.beginPath()\n            context.lineWidth = 1\n            context.rect(brick.x, brick.y, brick.width, brick.height)\n            if (brick.selected) {\n                context.fill()\n                context.stroke()\n            }\n            if (grid === selectedGrid) {\n                context.stroke()\n            }\n            context.closePath()\n        }\n    }\n\n    if (selectedBrick) {\n        //context.fillStyle = '999999';\n        context.beginPath()\n        context.strokeStyle = '#00ff00'\n\n        context.lineWidth = 3\n        context.rect(\n            selectedBrick.x,\n            selectedBrick.y,\n            selectedBrick.width,\n            selectedBrick.height\n        )\n        // context.fill();\n        context.stroke()\n        context.closePath()\n    }\n}\n"]}